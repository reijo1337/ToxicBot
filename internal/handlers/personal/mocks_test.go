// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package personal is a generated GoMock package.
package personal

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockmessageRepository is a mock of messageRepository interface.
type MockmessageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockmessageRepositoryMockRecorder
}

// MockmessageRepositoryMockRecorder is the mock recorder for MockmessageRepository.
type MockmessageRepositoryMockRecorder struct {
	mock *MockmessageRepository
}

// NewMockmessageRepository creates a new mock instance.
func NewMockmessageRepository(ctrl *gomock.Controller) *MockmessageRepository {
	mock := &MockmessageRepository{ctrl: ctrl}
	mock.recorder = &MockmessageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmessageRepository) EXPECT() *MockmessageRepositoryMockRecorder {
	return m.recorder
}

// GetEnabledMessages mocks base method.
func (m *MockmessageRepository) GetEnabledMessages() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnabledMessages")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnabledMessages indicates an expected call of GetEnabledMessages.
func (mr *MockmessageRepositoryMockRecorder) GetEnabledMessages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnabledMessages", reflect.TypeOf((*MockmessageRepository)(nil).GetEnabledMessages))
}
