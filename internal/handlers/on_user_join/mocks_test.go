// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package on_user_join is a generated GoMock package.
package on_user_join

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockgreetingsRepository is a mock of greetingsRepository interface.
type MockgreetingsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockgreetingsRepositoryMockRecorder
}

// MockgreetingsRepositoryMockRecorder is the mock recorder for MockgreetingsRepository.
type MockgreetingsRepositoryMockRecorder struct {
	mock *MockgreetingsRepository
}

// NewMockgreetingsRepository creates a new mock instance.
func NewMockgreetingsRepository(ctrl *gomock.Controller) *MockgreetingsRepository {
	mock := &MockgreetingsRepository{ctrl: ctrl}
	mock.recorder = &MockgreetingsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgreetingsRepository) EXPECT() *MockgreetingsRepositoryMockRecorder {
	return m.recorder
}

// GetEnabledGreetings mocks base method.
func (m *MockgreetingsRepository) GetEnabledGreetings() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnabledGreetings")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnabledGreetings indicates an expected call of GetEnabledGreetings.
func (mr *MockgreetingsRepositoryMockRecorder) GetEnabledGreetings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnabledGreetings", reflect.TypeOf((*MockgreetingsRepository)(nil).GetEnabledGreetings))
}

// Mocklogger is a mock of logger interface.
type Mocklogger struct {
	ctrl     *gomock.Controller
	recorder *MockloggerMockRecorder
}

// MockloggerMockRecorder is the mock recorder for Mocklogger.
type MockloggerMockRecorder struct {
	mock *Mocklogger
}

// NewMocklogger creates a new mock instance.
func NewMocklogger(ctrl *gomock.Controller) *Mocklogger {
	mock := &Mocklogger{ctrl: ctrl}
	mock.recorder = &MockloggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocklogger) EXPECT() *MockloggerMockRecorder {
	return m.recorder
}

// Warn mocks base method.
func (m *Mocklogger) Warn(arg0 context.Context, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Warn", arg0, arg1)
}

// Warn indicates an expected call of Warn.
func (mr *MockloggerMockRecorder) Warn(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*Mocklogger)(nil).Warn), arg0, arg1)
}

// WithError mocks base method.
func (m *Mocklogger) WithError(arg0 context.Context, arg1 error) context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithError", arg0, arg1)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// WithError indicates an expected call of WithError.
func (mr *MockloggerMockRecorder) WithError(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithError", reflect.TypeOf((*Mocklogger)(nil).WithError), arg0, arg1)
}

// WithField mocks base method.
func (m *Mocklogger) WithField(arg0 context.Context, arg1 string, arg2 any) context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithField", arg0, arg1, arg2)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// WithField indicates an expected call of WithField.
func (mr *MockloggerMockRecorder) WithField(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithField", reflect.TypeOf((*Mocklogger)(nil).WithField), arg0, arg1, arg2)
}

// Mockrandomizer is a mock of randomizer interface.
type Mockrandomizer struct {
	ctrl     *gomock.Controller
	recorder *MockrandomizerMockRecorder
}

// MockrandomizerMockRecorder is the mock recorder for Mockrandomizer.
type MockrandomizerMockRecorder struct {
	mock *Mockrandomizer
}

// NewMockrandomizer creates a new mock instance.
func NewMockrandomizer(ctrl *gomock.Controller) *Mockrandomizer {
	mock := &Mockrandomizer{ctrl: ctrl}
	mock.recorder = &MockrandomizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockrandomizer) EXPECT() *MockrandomizerMockRecorder {
	return m.recorder
}

// Intn mocks base method.
func (m *Mockrandomizer) Intn(n int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intn", n)
	ret0, _ := ret[0].(int)
	return ret0
}

// Intn indicates an expected call of Intn.
func (mr *MockrandomizerMockRecorder) Intn(n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intn", reflect.TypeOf((*Mockrandomizer)(nil).Intn), n)
}
