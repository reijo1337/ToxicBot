// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package handlers is a generated GoMock package.
package handlers

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	telebot_v3 "gopkg.in/telebot.v3"
)

// MocksubHandler is a mock of subHandler interface.
type MocksubHandler struct {
	ctrl     *gomock.Controller
	recorder *MocksubHandlerMockRecorder
}

// MocksubHandlerMockRecorder is the mock recorder for MocksubHandler.
type MocksubHandlerMockRecorder struct {
	mock *MocksubHandler
}

// NewMocksubHandler creates a new mock instance.
func NewMocksubHandler(ctrl *gomock.Controller) *MocksubHandler {
	mock := &MocksubHandler{ctrl: ctrl}
	mock.recorder = &MocksubHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocksubHandler) EXPECT() *MocksubHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MocksubHandler) Handle(arg0 telebot_v3.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MocksubHandlerMockRecorder) Handle(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MocksubHandler)(nil).Handle), arg0)
}

// Slug mocks base method.
func (m *MocksubHandler) Slug() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Slug")
	ret0, _ := ret[0].(string)
	return ret0
}

// Slug indicates an expected call of Slug.
func (mr *MocksubHandlerMockRecorder) Slug() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Slug", reflect.TypeOf((*MocksubHandler)(nil).Slug))
}
