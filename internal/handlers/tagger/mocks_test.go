// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package tagger is a generated GoMock package.
package tagger

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockmessageGenerator is a mock of messageGenerator interface.
type MockmessageGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockmessageGeneratorMockRecorder
}

// MockmessageGeneratorMockRecorder is the mock recorder for MockmessageGenerator.
type MockmessageGeneratorMockRecorder struct {
	mock *MockmessageGenerator
}

// NewMockmessageGenerator creates a new mock instance.
func NewMockmessageGenerator(ctrl *gomock.Controller) *MockmessageGenerator {
	mock := &MockmessageGenerator{ctrl: ctrl}
	mock.recorder = &MockmessageGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmessageGenerator) EXPECT() *MockmessageGeneratorMockRecorder {
	return m.recorder
}

// GetMessageText mocks base method.
func (m *MockmessageGenerator) GetMessageText() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageText")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessageText indicates an expected call of GetMessageText.
func (mr *MockmessageGeneratorMockRecorder) GetMessageText() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageText", reflect.TypeOf((*MockmessageGenerator)(nil).GetMessageText))
}

// Mocklogger is a mock of logger interface.
type Mocklogger struct {
	ctrl     *gomock.Controller
	recorder *MockloggerMockRecorder
}

// MockloggerMockRecorder is the mock recorder for Mocklogger.
type MockloggerMockRecorder struct {
	mock *Mocklogger
}

// NewMocklogger creates a new mock instance.
func NewMocklogger(ctrl *gomock.Controller) *Mocklogger {
	mock := &Mocklogger{ctrl: ctrl}
	mock.recorder = &MockloggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocklogger) EXPECT() *MockloggerMockRecorder {
	return m.recorder
}

// Warn mocks base method.
func (m *Mocklogger) Warn(arg0 context.Context, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Warn", arg0, arg1)
}

// Warn indicates an expected call of Warn.
func (mr *MockloggerMockRecorder) Warn(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*Mocklogger)(nil).Warn), arg0, arg1)
}

// WithError mocks base method.
func (m *Mocklogger) WithError(arg0 context.Context, arg1 error) context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithError", arg0, arg1)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// WithError indicates an expected call of WithError.
func (mr *MockloggerMockRecorder) WithError(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithError", reflect.TypeOf((*Mocklogger)(nil).WithError), arg0, arg1)
}

// WithFields mocks base method.
func (m *Mocklogger) WithFields(arg0 context.Context, arg1 map[string]any) context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithFields", arg0, arg1)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// WithFields indicates an expected call of WithFields.
func (mr *MockloggerMockRecorder) WithFields(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithFields", reflect.TypeOf((*Mocklogger)(nil).WithFields), arg0, arg1)
}

// Mockrandomizer is a mock of randomizer interface.
type Mockrandomizer struct {
	ctrl     *gomock.Controller
	recorder *MockrandomizerMockRecorder
}

// MockrandomizerMockRecorder is the mock recorder for Mockrandomizer.
type MockrandomizerMockRecorder struct {
	mock *Mockrandomizer
}

// NewMockrandomizer creates a new mock instance.
func NewMockrandomizer(ctrl *gomock.Controller) *Mockrandomizer {
	mock := &Mockrandomizer{ctrl: ctrl}
	mock.recorder = &MockrandomizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockrandomizer) EXPECT() *MockrandomizerMockRecorder {
	return m.recorder
}

// Int63n mocks base method.
func (m *Mockrandomizer) Int63n(arg0 int64) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Int63n", arg0)
	ret0, _ := ret[0].(int64)
	return ret0
}

// Int63n indicates an expected call of Int63n.
func (mr *MockrandomizerMockRecorder) Int63n(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Int63n", reflect.TypeOf((*Mockrandomizer)(nil).Int63n), arg0)
}

// Intn mocks base method.
func (m *Mockrandomizer) Intn(arg0 int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intn", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// Intn indicates an expected call of Intn.
func (mr *MockrandomizerMockRecorder) Intn(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intn", reflect.TypeOf((*Mockrandomizer)(nil).Intn), arg0)
}
