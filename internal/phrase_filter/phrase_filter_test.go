package phrase_filter

import (
	"testing"
)

func TestDefaultPhraseFilter_IsMeaningfulPhrase(t *testing.T) {
	filter := NewDefaultPhraseFilter()

	tests := []struct {
		name     string
		text     string
		expected bool
	}{
		// –û—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
		{
			name:     "–ü—Ä–æ—Å—Ç–∞—è –æ—Å–º—ã—Å–ª–µ–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞",
			text:     "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?",
			expected: true,
		},
		{
			name:     "–§—Ä–∞–∑–∞ —Å –≥–ª–∞–≥–æ–ª–æ–º",
			text:     "–Ø –∏–¥—É –¥–æ–º–æ–π",
			expected: true,
		},
		{
			name:     "–í–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—Ä–∞–∑–∞",
			text:     "–ß—Ç–æ —Ç—ã –¥–µ–ª–∞–µ—à—å?",
			expected: true,
		},
		{
			name:     "–§—Ä–∞–∑–∞ —Å —á–∏—Å–ª–∞–º–∏",
			text:     "–°–µ–≥–æ–¥–Ω—è 15 –º–∞—Ä—Ç–∞",
			expected: true,
		},
		{
			name:     "–ê–Ω–≥–ª–∏–π—Å–∫–∞—è —Ñ—Ä–∞–∑–∞",
			text:     "Hello, how are you?",
			expected: true,
		},
		{
			name:     "–§—Ä–∞–∑–∞ —Å –≤–æ—Å–∫–ª–∏—Ü–∞–Ω–∏–µ–º",
			text:     "–û—Ç–ª–∏—á–Ω–æ!",
			expected: true,
		},
		{
			name:     "–î–ª–∏–Ω–Ω–∞—è –æ—Å–º—ã—Å–ª–µ–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞",
			text:     "–°–µ–≥–æ–¥–Ω—è –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≥—É–ª–∫–∏ –≤ –ø–∞—Ä–∫–µ",
			expected: true,
		},

		// –ù–µ–æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
		{
			name:     "–û–¥–Ω–æ —Å–ª–æ–≤–æ",
			text:     "–ü—Ä–∏–≤–µ—Ç",
			expected: false,
		},
		{
			name:     "–ö–æ—Ä–æ—Ç–∫–æ–µ —Å–ª–æ–≤–æ",
			text:     "–∞",
			expected: false,
		},
		{
			name:     "–î–≤–∞ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–ª–æ–≤–∞",
			text:     "–∞ –±",
			expected: false,
		},
		{
			name:     "–¢–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª—ã",
			text:     "!!!",
			expected: false,
		},
		{
			name:     "–°–º–µ—à–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã",
			text:     "–∞!",
			expected: false,
		},
		{
			name:     "–ö–æ—Ä–æ—Ç–∫–æ–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ",
			text:     "hi",
			expected: false,
		},
		{
			name:     "–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞",
			text:     "",
			expected: false,
		},
		{
			name:     "–¢–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã",
			text:     "   ",
			expected: false,
		},
		{
			name:     "–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞",
			text:     "–æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ " + string(make([]rune, 1000)),
			expected: false,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := filter.IsMeaningfulPhrase(tt.text)
			if result != tt.expected {
				t.Errorf("IsMeaningfulPhrase(%q) = %v, want %v", tt.text, result, tt.expected)
			}
		})
	}
}

func TestCustomPhraseFilter_IsMeaningfulPhrase(t *testing.T) {
	// –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä —Å –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏
	filter := NewCustomPhraseFilter(5, 500, 3)

	tests := []struct {
		name     string
		text     string
		expected bool
	}{
		{
			name:     "–ö–æ—Ä–æ—Ç–∫–∞—è —Ñ—Ä–∞–∑–∞ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞)",
			text:     "–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º",
			expected: false, // –ú–µ–Ω—å—à–µ 5 —Å–∏–º–≤–æ–ª–æ–≤
		},
		{
			name:     "–î–ª–∏–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞ —Å —Ç—Ä–µ–º—è —Å–ª–æ–≤–∞–º–∏",
			text:     "–°–µ–≥–æ–¥–Ω—è –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞",
			expected: true,
		},
		{
			name:     "–§—Ä–∞–∑–∞ —Å –¥–≤—É–º—è —Å–ª–æ–≤–∞–º–∏ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞)",
			text:     "–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º",
			expected: false, // –¢–æ–ª—å–∫–æ 2 —Å–ª–æ–≤–∞
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := filter.IsMeaningfulPhrase(tt.text)
			if result != tt.expected {
				t.Errorf("IsMeaningfulPhrase(%q) = %v, want %v", tt.text, result, tt.expected)
			}
		})
	}
}

func TestPhraseFilter_EdgeCases(t *testing.T) {
	filter := NewDefaultPhraseFilter()

	tests := []struct {
		name     string
		text     string
		expected bool
	}{
		{
			name:     "–§—Ä–∞–∑–∞ —Å —ç–º–æ–¥–∑–∏",
			text:     "–ü—Ä–∏–≤–µ—Ç! üòä",
			expected: true,
		},
		{
			name:     "–§—Ä–∞–∑–∞ —Å —Ü–∏—Ñ—Ä–∞–º–∏ –∏ –±—É–∫–≤–∞–º–∏",
			text:     "–í–µ—Ä—Å–∏—è 2.0",
			expected: true,
		},
		{
			name:     "–§—Ä–∞–∑–∞ —Å –ø—É–Ω–∫—Ç—É–∞—Ü–∏–µ–π",
			text:     "–î–∞, –∫–æ–Ω–µ—á–Ω–æ!",
			expected: true,
		},
		{
			name:     "–§—Ä–∞–∑–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏",
			text:     "  –ü—Ä–∏–≤–µ—Ç   –≤—Å–µ–º  ",
			expected: true,
		},
		{
			name:     "–§—Ä–∞–∑–∞ —Å —Ç–∞–±—É–ª—è—Ü–∏–µ–π",
			text:     "–ü—Ä–∏–≤–µ—Ç\t–≤—Å–µ–º",
			expected: true,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := filter.IsMeaningfulPhrase(tt.text)
			if result != tt.expected {
				t.Errorf("IsMeaningfulPhrase(%q) = %v, want %v", tt.text, result, tt.expected)
			}
		})
	}
}

func BenchmarkDefaultPhraseFilter_IsMeaningfulPhrase(b *testing.B) {
	filter := NewDefaultPhraseFilter()
	text := "–°–µ–≥–æ–¥–Ω—è –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≥—É–ª–∫–∏ –≤ –ø–∞—Ä–∫–µ"

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		filter.IsMeaningfulPhrase(text)
	}
}
